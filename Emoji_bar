import 'package:flutter/material.dart';
import 'package:excel/excel.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';

void main() {
  runApp(const MoodTrackerApp());
}

class MoodTrackerApp extends StatelessWidget {
  const MoodTrackerApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Mood Tracker',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MoodTrackerScreen(),
    );
  }
}

class MoodTrackerScreen extends StatefulWidget {
  const MoodTrackerScreen({super.key});

  @override
  State<MoodTrackerScreen> createState() => _MoodTrackerScreenState();
}

class _MoodTrackerScreenState extends State<MoodTrackerScreen> {
  final List<String> emojis = ['üòÑ', 'üôÇ', 'üòê', 'üòï', 'üò¢'];
  int? selectedIndex;

  // Function to save mood to Excel
  Future<void> saveToExcel(String mood, String timestamp) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final path = '${directory.path}/mood_log.xlsx';
      final file = File(path);

      Excel excel;
      Sheet sheet;

      // Check if file exists
      if (file.existsSync()) {
        final bytes = file.readAsBytesSync();
        excel = Excel.decodeBytes(bytes);
        sheet = excel['MoodLog'];
      } else {
        excel = Excel.createExcel();
        // The default sheet is usually 'Sheet1', so rename it
        excel.rename('Sheet1', 'MoodLog');
        sheet = excel['MoodLog'];
      }

      // Add header only if sheet is empty
      if (sheet.rows.isEmpty) {
        sheet.appendRow(['Timestamp', 'Mood']);
      }

      sheet.appendRow([timestamp, mood]);

      final encoded = excel.encode();
      if (encoded != null) {
        file.writeAsBytesSync(encoded);
      } else {
        throw Exception('Failed to encode Excel file.');
      }

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Mood "$mood" saved! üìÑ')),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error saving mood: \n$e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('How was your day?'),
        centerTitle: true,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text(
              'Tell me with an emoji:',
              style: TextStyle(fontSize: 18),
            ),
            const SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: List.generate(emojis.length, (index) {
                return GestureDetector(
                  onTap: () {
                    setState(() {
                      selectedIndex = index;
                    });
                    final selectedMood = emojis[index];
                    final timestamp = DateTime.now().toString();
                    saveToExcel(selectedMood, timestamp);
                  },
                  child: Container(
                    margin: const EdgeInsets.symmetric(horizontal: 10),
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: selectedIndex == index
                          ? Colors.blue[100]
                          : Colors.grey[200],
                      shape: BoxShape.circle,
                    ),
                    child: Text(
                      emojis[index],
                      style: const TextStyle(fontSize: 32),
                    ),
                  ),
                );
              }),
            ),
            const SizedBox(height: 30),
            if (selectedIndex != null)
              Text(
                'You selected: ${emojis[selectedIndex!]}',
                style: const TextStyle(fontSize: 16),
              ),
          ],
        ),
      ),
    );
  }
}
